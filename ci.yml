 
# Docker Image Build/Push Action: https://github.com/docker/build-push-action
# Helm Chart Testing Action: https://github.com/helm/chart-testing-action
name: Build

on: 
  push:
    branches:
      - develop
      - release/*
      - feature/*
      - hotfix/*
    # tags:
    #   - '*'
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.9

    - name: Configure Go
      run: |
        echo "::set-env name=GOPATH::$(go env GOPATH)"
        echo "::add-path::$(go env GOPATH)/bin"
      shell: bash

    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Unshallow Repo
      run: git fetch --prune --unshallow

    - name: Dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt update -q
        sudo apt install -q -y git gcc make
        make deps
        go get -d -v -t ./...
        go get -v -u golang.org/x/lint/golint
        go get -v -u github.com/kisielk/errcheck
        go get -v -u honnef.co/go/tools/cmd/staticcheck
      shell: bash

    - name: CI - Lint
      run: |
        for file in $(find . -name '*.go'); do \
          golint ${file}; \
          if [ -n "$(golint ${file})" ]; then \
            exit 1; \
          fi; \
        done
      shell: bash

    - name: CI - Coverage
      run: |
        go vet ./...
        errcheck ./...
        staticcheck ./...
      shell: bash

    - name: CI - Test
      run: |
        go test -race ./... 2> /dev/null
      shell: bash

    - name: Vars - Source Variables
      id: vars
      run: |
        echo "Current Branch: ${BRANCH}"
        if [ "$BRANCH" == "refs/heads/master" ]; then
          echo "Setting deployment environment to: prod"
          echo ::set-output name=DEPLOYENV::prod
          DEPLOYENV=prod
        else
          echo "Setting deployment environment to: develop"
          echo ::set-output name=DEPLOYENV::develop
          DEPLOYENV=develop
        fi;
        make show/build/info ENVIRONMENT=$DEPLOYENV
        echo ::set-output name=$(make .print-DOCKER_BUILD_ARGS ENVIRONMENT=$DEPLOYENV)
        echo ::set-output name=$(make .print-DOCKER_IMAGE ENVIRONMENT=$DEPLOYENV)
        echo ::set-output name=$(make .print-GIT_COMMIT ENVIRONMENT=$DEPLOYENV)
        echo ::set-output name=$(make .print-VERSION ENVIRONMENT=$DEPLOYENV)
        echo ::set-output name=$(make .print-RELEASE_VERSION ENVIRONMENT=$DEPLOYENV)
        echo ::set-output name=$(make .print-GIT_DIRTY ENVIRONMENT=$DEPLOYENV)
      shell: bash
      env:
        BRANCH: ${{ github.ref }}

    - name: Helm - Lint Chart
      run: |
        make helm/lint ENVIRONMENT=$DEPLOYENV
      shell: bash
      env:
        DEPLOYENV: ${{ steps.vars.outputs.DEPLOYENV }}

    - name: Helm - Render Artifacts
      run: |
        make helm/render/overrides .render/envvars ENVIRONMENT=$DEPLOYENV
      shell: bash
      env:
        DEPLOYENV: ${{ steps.vars.outputs.DEPLOYENV }}

    - name: Publish - Helm Chart
      uses: actions/upload-artifact@v1
      with:
        name: helmchart
        path: deployments/chart

    - name: Publish - Helm Overrides
      uses: actions/upload-artifact@v1
      with:
        name: helmchartvalues
        path: dist/overrides.yaml

    - name: Publish - Deployment Env Vars
      uses: actions/upload-artifact@v1
      with:
        name: deployvars
        path: dist/deploy.env

    - name: Publish - Docker Image
      if: ${{ github.ref == 'refs/heads/develop' }}
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        build_args: ${{ steps.vars.outputs.DOCKER_BUILD_ARGS }}
        tag_with_ref: false
        tag_with_sha: false
        repository: ${{ secrets.DOCKER_IMAGE }}
        tags: ${{ steps.vars.outputs.RELEASE_VERSION }}

  deploy:
    name: Deploy To Development
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: ${{ github.ref == 'refs/heads/develop' }}
    steps:
    - name: Download - Helm Chart
      uses: actions/download-artifact@v1
      with:
        name: helmchart
        path: chart

    - name: Download Helm Values
      uses: actions/download-artifact@v1
      with:
        name: helmchartvalues
        path: ./
    
    - name: Download Deployment Env Vars
      uses: actions/download-artifact@v1
      with:
        name: deployvars
        path: ./

    - name: Setup helm binary
      uses: azure/setup-helm@v1
      with:
        version: 'v3.1.2'

    - name: Setup kubectl binary
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.18.0'

    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1.0.0-rc.1
      with:
        node_image: kindest/node:v1.18.0
      
    - name: Deploy Helm Chart
      run: |
        set -a
        . ./deploy.env
        set +a
        kubectl create namespace  ${DEPLOY_NAMESPACE}
        helm upgrade \
          --install \
          -n ${DEPLOY_NAMESPACE} \
          -f overrides.yaml \
          --atomic \
          --history-max 10 \
          ${DEPLOY_NAME} ./chart
      shell: bash

    - name: Test Helm Chart
      run: |
        set -a
        . ./deploy.env
        set +a
        helm test ${DEPLOY_NAME} -n ${DEPLOY_NAMESPACE}
      shell: bash
